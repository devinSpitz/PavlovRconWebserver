@using Newtonsoft.Json.Linq
@using Newtonsoft.Json
@model string
@{
    JArray jsonAsArray = JsonConvert.DeserializeObject(Model) as JArray;

    var classes = jsonAsArray
        .OfType<JObject>()
        .ToList();
    var nonClasses = jsonAsArray
        .Where(x => x.Type != JTokenType.Object)
        .ToList();
}

<table class="table" style="background-color: white;">
    <thead>
        <tr>
            @{
                var anyClass = classes.FirstOrDefault();
                if (anyClass != null)
                {
                    var properties = anyClass.Properties().Select(x => x.Name).ToList();
                    foreach (var property in properties)
                    {
                        <th>@property</th>
                    }
                }
                else
                {
                    <th>Data</th>
                }
            }
        </tr>
    </thead>
    <tbody>
        @foreach (JObject item in classes)
        {
            
            await Html.RenderPartialAsync("JsonToHtmlSinglelevelChildPartialViewcshtml.cshtml", item);
            
        }
        @foreach (JValue item in nonClasses)
        {
            try
            {
                var tmp = JsonConvert.DeserializeObject(item.Value.ToString());
                if (tmp != null)
                {
                    await Html.RenderPartialAsync("JsonToHtmlSinglelevelChildPartialViewcshtml.cshtml", tmp);
                }
                else
                {
                    <tr>
                        <td>@item.Value</td>
                    </tr>
                }
            }
            catch (Exception e)
            {
                <tr>
                    <td>@item.Value</td>
                </tr>
            }
               
        }
    </tbody>
</table>