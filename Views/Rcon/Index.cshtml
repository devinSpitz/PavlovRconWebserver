@using Newtonsoft.Json
@model RconViewModel

@{
    List<string> commandsAllow = ViewBag.commandsAllow;
    var twoValueCommands = Model.TwoValueCommands.Where(x => commandsAllow.Contains(x.Name)).ToList();
    var playerCommands = Model.PlayerCommands.Where(x => commandsAllow.Contains(x.Name)).ToList();
    var server = ViewBag.Servers;
    ViewData["Title"] = "Commands";
}
@section Scripts{
    <script>
    let PlayerCommands = jQuery.parseJSON('@Html.Raw(@JsonConvert.SerializeObject(Model.PlayerCommands))');
    let TwoValueCommands = jQuery.parseJSON('@Html.Raw(@JsonConvert.SerializeObject(Model.TwoValueCommands))');
    let serverBanModel = jQuery.parseJSON('@Html.Raw(@JsonConvert.SerializeObject(new ServerBans()))');
    @if (Model.MultiRcon)
    {  
        <text>
        let MultiRcon = true;  
        </text>
    }else{
        <text>
        let MultiRcon = false;  
        </text>
    }
    </script>
}

@Html.LabelFor(x=>x.SingleServer)
@if (Model.MultiRcon)
{
    @Html.ListBoxFor(m => m.SingleServer, new MultiSelectList(server,"Id","Name",Model.SingleServer), new { @class = "form-control form-control-sm" })
}
else
{
    @Html.DropDownListFor(m => m.SingleServer, new SelectList(server,"Id","Name",Model.SingleServer), new { @class = "form-control form-control-sm form-select " })
}

<br>
<div class="card m-1 ">
    <div class="card-header">
        Signle paramter actions
    </div>
    <div class="card-body">
        <div class="row">
                @if (commandsAllow.Contains("ServerInfo"))
                {
                    <button type="button" class="center-block btn btn-primary btn-responsive col-sm-3 m-1" onclick="sendSingleCommand('ServerInfo')">ServerInfo</button>
                }<div class="col-sm-1"></div>
                @if (commandsAllow.Contains("ResetSND"))
                {
                    <button type="button" class="center-block btn btn-primary btn-responsive  col-sm-3 m-1" onclick="sendSingleCommand('ResetSND')">ResetSND</button>
                }<div class="col-sm-1"></div>
                @if (commandsAllow.Contains("RotateMap"))
                {
                    <button type="button" class="center-block btn btn-primary btn-responsive  col-sm-3 m-1" onclick="sendSingleCommand('RotateMap')">RotateMap</button>
                }
        </div>
            <div class="row">
                <button type="button" class="center-block btn btn-primary btn-responsive col-sm-3 m-1" onclick="BanMenu()">Ban Menu</button>
                <div class="col-sm-1"></div>
                @if (commandsAllow.Contains("Blacklist"))
                {
                    <button type="button" class="center-block btn btn-primary btn-responsive col-sm-3 m-1" onclick="sendSingleCommand('Blacklist')">InMemory Blacklist</button>
                }
            </div>
        
        @*// Buttons*@
    </div>
</div>


@* PlayerList *@
    <div class="card m-1 ">
        <div class="card-header">
            Player List *
            <button type="button" class="btn btn-primary btn-group" onclick="UpdatePlayerList()">Update</button>
        </div>
        <div class="card-body" id="PlayerListBig">
            @* Gets autopopulated *@
            
        </div>
    </div>
     

@if (!Model.MultiRcon && playerCommands.Count > 0)
{
   
    <div class="card m-1 ">
        <div class="card-header">
            Player/Server Actions *
            <button type="button" class="btn btn-primary btn-group" onclick="UpdatePlayers()">Update</button>
        </div>
        <div class="card-body" id="PlayerAction">
            <div class="row">
                <div class="col-sm-4">
                    @Html.LabelFor(x=>x.Players)
                    @Html.DropDownListFor(m => m.Players, new SelectList(Model.Players,"Name","SteamId",Model.PlayersSelected), new { @class = "form-control form-control-sm form-select ", size = 10 })
                </div>
                <div class="col-sm-4">
                    <div class="tooltipHover">
                    @Html.LabelFor(x => x.PlayerCommands)
                    <span class="tooltiptext">Server comamnds doesn't need a selected player</span>
                    </div>
                    @Html.DropDownListFor(m => playerCommands, new SelectList(playerCommands, "Name", "Name", playerCommands, "Group"), new {@class = "form-control form-control-sm form-select "})
                </div>
                <div class="col-sm-2" id="PlayerValueParent">
                    <label asp-for="PlayerValue"></label>
                    @* Gets autopopulated *@
                </div>
                <div class="col-sm-2 buttonParent">
                    <button id="Do" name="Do" type="button" class="btn btn-primary btn-group center" onclick="PlayerAction()">Do</button>
                </div>
            </div>
        </div>
    </div>
     
}
@{
    //Give Team Cach // switch Map
}
@if (twoValueCommands.Count > 0)
{
    <div class="card m-1 ">
        <div class="card-header">
            Actions with two values
        </div>
        <div class="card-body" id="TwoValueInputs">
            <div class="row">
                <div class="col-sm-4">
                    @Html.LabelFor(x => x.TwoValueCommands)
                    @Html.DropDownListFor(m => twoValueCommands, new SelectList(twoValueCommands, "Name", "Name", twoValueCommands), new {@class = "form-control form-control-sm form-select "})
                </div>
                <div class="col-sm-4" id="PlayerValueParent">
                    <label asp-for="PlayerValue"></label>
                    @* Gets autopopulated *@
                </div>
                <div class="col-sm-2" id="PlayerValueTwoParent">
                    <label asp-for="PlayerValueTwo"></label>
                    @* Gets autopopulated *@
                </div>
                <div class="col-sm-2 buttonParent">
                    <button id="Do" name="Do" type="button" class="btn btn-primary btn-group center" onclick="TwoValuesSendCommand()">Do</button>
                </div>
            </div>
        </div>
    </div>
 
}
* Updates every 30 secs automaticly
<style>

option,.form-select{
    font-size: 1.25em!important;
}
    .buttonParent{
        margin-top: 40px;
    }
    .center {
      margin: 0;
      left: 50%;
      -ms-transform: translate(-50%, -50%);
      transform: translate(-50%, -50%);
    }
    .modal-body{
      display: inline-block;
    }
                
    select[multiple]{
    max-height: 500px;
    min-height: 200px;
    }
    .tooltipHover {
      position: relative;
      display: inline-block;
    }
    
    /* Tooltip text */
    .tooltipHover .tooltiptext {
      visibility: hidden;
     display: inline-block;
      background-color: black;
      color: #fff;
      text-align: center;
      padding: 5px 0;
      border-radius: 6px;
      min-width: 200px;
     
      /* Position the tooltip text - see examples below! */
      position: absolute;
      z-index: 1;
    }
    
    /* Show the tooltip text when you mouse over the tooltip container */
    .tooltipHover:hover .tooltiptext {
      visibility: visible;
    }
    
</style>


<script src="~/js/rcon.js" asp-append-version="true"></script>