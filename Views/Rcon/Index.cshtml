@using Newtonsoft.Json
@model RconViewModel

@{
  
    var server = ViewBag.Servers;
    ViewData["Title"] = "Rcon Page";
}
<style>
.overlay {
    background: #e9e9e9; 
    display: none;      
    position: absolute;  
    top: 0;                  
    right: 0;              
    bottom: 0;
    left: 0;
    opacity: 0.5;
    z-index: 999999;
}

#loadingDiv{
  position:absolute;
  top:0px;
  right:0px;
  width:100%;
  height:100%;
  background-color:#666;
  background-image:url("/images/Loadingsome.gif");
  background-repeat:no-repeat;
  background-position:center;
  z-index:10000000;
  filter: alpha(opacity=40); /* For IE8 and earlier */
}
.nowrap{white-space: nowrap;}

 
</style>
@section Scripts{
    <script>
    let PlayerCommands = jQuery.parseJSON('@Html.Raw(@JsonConvert.SerializeObject(@Model.PlayerCommands))');
    let TwoValueCommands = jQuery.parseJSON('@Html.Raw(@JsonConvert.SerializeObject(@Model.TwoValueCommands))');
    @if (Model.MultiRcon)
    {  
        <text>
        let MultiRcon = true;  
        </text>
    }else{
        <text>
        let MultiRcon = false;  
        </text>
    }
    </script>
}
@Html.LabelFor(x=>x.RconServer)
@if (Model.MultiRcon)
{
    @Html.ListBoxFor(m => m.RconServer, new MultiSelectList(server,"Id","Name",Model.RconServer), new { @class = "form-control form-control-sm" })
}
else
{
    @Html.DropDownListFor(m => m.RconServer, new SelectList(server,"Id","Name",Model.RconServer), new { @class = "form-control form-control-sm" })
}
<div class="overlay">
    <div id="loadingDiv">
    </div>
</div>
<br>
<div class="panel panel-default">
    <div class="panel-heading">
        Signle paramter actions
    </div>
    <div class="panel-body">
        <div class="row">
            <div class="col-md-12 responsive nowrap">
                <button type="button" class="center-block btn btn-success btn-responsive col-md-3" onclick="sendSingleCommand('ServerInfo')">ServerInfo</button>
                <div class="col-md-1"></div>
                <button type="button" class="center-block btn btn-success btn-responsive  col-md-3" onclick="sendSingleCommand('ResetSND')">ResetSND</button>
                <div class="col-md-1"></div>
                <button type="button" class="center-block btn btn-success btn-responsive  col-md-3" onclick="sendSingleCommand('RotateMap')">RotateMap</button>
            </div>
        </div>
        
            @*// Buttons*@
    </div>
</div>
@if (!Model.MultiRcon)
{
   
    <div class="panel panel-default">
        <div class="panel-heading">
            Player Actions 
            <button type="button" class="btn btn-success btn-group" onclick="UpdatePlayers()">Update Players</button>
        </div>
        <div class="panel-body" id="PlayerAction">
            <div class="row">
                <div class="col-sm-4">
                    @Html.LabelFor(x=>x.Players)
                    @Html.ListBoxFor(m => m.Players, new MultiSelectList(Model.Players,"Name","SteamId",Model.PlayersSelected), new { @class = "form-control form-control-sm" })
                </div>
                <div class="col-sm-4">
                    @Html.LabelFor(x=>x.PlayerCommands)
                    @Html.DropDownListFor(m => m.PlayerCommands, new SelectList(Model.PlayerCommands,"Name","Name",Model.PlayerCommands), new { @class = "form-control form-control-sm" })
                </div>
                <div class="col-sm-2" id="PlayerValueParent">
                    <label asp-for="PlayerValue"></label>
                    @* Gets autopopulated *@
                </div>
                <div class="col-sm-2 buttonParent">
                    <button id="Do" name="Do" type="button" class="btn btn-success btn-group center" onclick="PlayerAction()">Do</button>
                </div>
            </div>
        </div>
    </div>
     
}
@{
    //Give Team Cach // switch Map
}
<div class="panel panel-default">
    <div class="panel-heading">
        Actions with two values
    </div>
    <div class="panel-body" id="TwoValueInputs">
        <div class="row">
            <div class="col-sm-4">
                @Html.LabelFor(x=>x.TwoValueCommands)
                @Html.DropDownListFor(m => m.TwoValueCommands, new SelectList(Model.TwoValueCommands,"Name","Name",Model.TwoValueCommands), new { @class = "form-control form-control-sm" })
            </div>
            <div class="col-sm-4" id="PlayerValueParent">
                <label asp-for="PlayerValue"></label>
                @* Gets autopopulated *@
            </div>
            <div class="col-sm-2" id="PlayerValueTwoParent">
                <label asp-for="PlayerValueTwo"></label>
                @* Gets autopopulated *@
            </div>
            <div class="col-sm-2 buttonParent">
                <button id="Do" name="Do" type="button" class="btn btn-success btn-group center" onclick="TwoValuesSendCommand()">Do</button>
            </div>
        </div>
    </div>
</div>


<div id="modal-placeholder"></div>
<style>
    .buttonParent{
        margin-top: 40px;
    }
    .center {
      margin: 0;
      position: absolute;
      left: 50%;
      -ms-transform: translate(-50%, -50%);
      transform: translate(-50%, -50%);
    }
</style>


<script src="~/js/rcon.js" asp-append-version="true"></script>