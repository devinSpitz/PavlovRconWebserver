@model List<PavlovServerPlayerListPublicViewModel>
@using Microsoft.Extensions.Configuration
@inject IConfiguration Configuration
@{
    var subPath = Configuration["subPath"];
    List<string> ids = new List<string>();
}
<link rel="stylesheet" href="~/lib/bootstrap/dist/css/bootstrap.min.css" asp-append-version="true"/>
<link rel="stylesheet" href="~/lib/bootstrap/dist/css/bootstrap-theme.css" asp-append-version="true"/>
<style>
.Team0{
    --bs-table-accent-bg: #30303000 !important;
      background-color: rgba(40,180,232,0.5) !important;
}
.Team1{                    
    --bs-table-accent-bg: #30303000 !important;
      background-color: #892224 !important;  
}
    .stylePavlovServers{
        background-color: @ViewBag.background;
        color: @ViewBag.textColor;
        text-align: center;
    }
    .pavlovTable{
        margin-left: auto;
        margin-right: auto;
        color: @ViewBag.textColor;
    }
    .Team0{
        background-color: #2b669a;
    }
    
    .Team1{
        background-color: #f98787;
    }
 .modal-body{
      display: inline-block;
    }
    
</style>

@if (!Model.Any())
{
    <div class="bg-info">
        <h1>There is no server available!</h1>
    </div>
}
@foreach (var viewModel in Model)
{
    var id = "datatables" + viewModel.serverId;
    var id2 = "datatables" + viewModel.serverId+"-d";
    ids.Add(id);
    ids.Add(id2);
    <div class="stylePavlovServers">
        @{
            if (viewModel == null) continue;
            var additionalHtml = "";
            if (viewModel.serverId != null && viewModel.serverId != 0 && viewModel.withMaps)
            {
                additionalHtml = "<a class='btn btn-sm btn-primary'  onclick='GetMapsForServer(" + viewModel.serverId + ")'>Show <span class='fas fa-map'></span></a>";
            }

            var hasTwoTeams = viewModel.PlayerList.GroupBy(x => x.TeamId).Count() == 2;
            var tableHeaer = "<thead><tr><th>Name</th><th>Score</th><th>Kills</th><th>Deaths</th><th>Assits</th><th>Headshots</th><th>Cash</th></tr></thead>";
        }
        @await Html.PartialAsync("/Views/Rcon/PavlovServerInfoSinglePartialView.cshtml", new ServerInfoViewModel
        {
            Name = viewModel.ServerInfo.ServerName,
            ServerInfo = viewModel.ServerInfo,
            AdditionalHtml = additionalHtml,
            ServerId = viewModel.serverId
        })
        @if (hasTwoTeams)
        {
                <div class="col-xs-12 col-sm-12 col-md-12 col-lg-12 col-xl-12 col-xxl-12">
                    <table id="@id" class="table pavlovTable table-responsive table-bordered bg-primary Team0">
                        @Html.Raw(tableHeaer)
                        <tr>
                            <th colspan="8">Team score: @viewModel.team0Score</th>
                        </tr>
                        @foreach (var player in viewModel.PlayerList.Where(x => x.TeamId == 0).OrderByDescending(x => x.Score))
                        {
                            @await Html.PartialAsync("/Views/PublicViewLists/PlayerSingle.cshtml", player)
                        }

                    </table>
                </div>
                <div class="col-xs-12 col-sm-12 col-md-12 col-lg-12 col-xl-12 col-xxl-12">
                    <table id="@id2" class="table pavlovTable table-responsive table-bordered Team1  ">
                        @Html.Raw(tableHeaer)
                        <tr>
                            <th colspan="8">Team score: @viewModel.team1Score</th>
                        </tr>
                        @foreach (var player in viewModel.PlayerList.Where(x => x.TeamId == 1).OrderByDescending(x => x.Score))
                        {
                            @await Html.PartialAsync("/Views/PublicViewLists/PlayerSingle.cshtml", player)
                        }
                    </table>
                </div>
        }
        else
        {
            <table id="@id" class="table pavlovTable table-bordered table-responsive col-xs-12 col-sm-12 col-md-12 col-lg-12 col-xl-12 col-xxl-12">
                @Html.Raw(tableHeaer)
                @foreach (var player in viewModel.PlayerList.OrderByDescending(x => x.Score))
                {
                    @await Html.PartialAsync("/Views/PublicViewLists/PlayerSingle.cshtml", player)
                }

            </table>
        }
    </div>
}

<script>
function GetMapsForServer(serverId)
{
    
    $(".overlay").show();
    $.ajax({
        type: 'GET',
        url: "@Html.Raw(subPath)PublicViewLists/MapFromSerer/"+serverId,
        success:  function(data)
        {
            $('#modal-placeholder').html(data);
            $('#modal-placeholder > .modal').modal('show');
            $(".overlay").hide();
        },
        error: function()
        {
            alert("Something did go wrong!");
            $(".overlay").hide();
        }
    });
}

function init()
{
   let ids = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(ids) + "");
    $.each(ids,function()
    {
        let table = $("#"+this);
             if(table.exists())
                 {
                  table.DataTable({
                      "order": [[ 1, "desc" ]],
                      responsive: true,
                      "autoWidth": false,
                      filter: false, 
                      "paging":   false,
                        "bInfo": false,
                      });   
                  }
         
    });
}

</script>